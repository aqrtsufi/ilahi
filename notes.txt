<template>
  <div class="container mx-auto p-4">
    <h1 class="text-4xl font-bold mb-6 text-center text-green-800">{{ EXPLANATION_TEXT.title }}</h1>
    <div v-for="(section, index) in EXPLANATION_TEXT.sections" :key="index" class="bg-white shadow-lg rounded-lg p-6 mb-8">
      <h2 class="text-2xl font-semibold mb-4">{{ section.title }}</h2>
      <template v-for="(content, contentIndex) in section.content" :key="contentIndex">
        <p v-if="content.type === 'paragraph'" class="mb-4" v-html="content.text"></p>
        <blockquote v-else-if="content.type === 'quote'" class="italic text-gray-700 border-l-4 border-green-500 pl-4 my-4">
          <p v-html="content.text"></p>
        </blockquote>
      </template>
      <p v-if="section.author" class="mt-2 text-right">- {{ section.author }}</p>
    </div>
  </div>
</template>

<script setup lang="ts">
import { EXPLANATION_TEXT } from '../utils/contentConfig';
</script>

search should not be case sensitive
there are 2 search bars, to remove one
how to reset search. 

and also remember to factor in accessibility everywhere in all that we just did too. 

ok let us get to work now, give me code and show me one by one how to fix the files songStore, songProcessor, singleSongPDF, fullSongPDF so that the primary goal is to use the reactivity, vue and pinia's design, no need to loop through singleSongPDF anymore to achieve fullBook but fullBook should still consist of all the songs, with their translation, 
and there should be a new tool on @BookView.vue so that it is the user who can choose to either download the book consisting of all the songs available, or a basic version of the book (i will provide info later how to determine that - for now put a note for the user: coming up!), or they should be able to choose from the list of songs which songs they want in their book and in which order, and if they do not choose a particular order, give them option to choose alphabetical order, 



When you update the raw data in git, you would need to update this file on GitHub for the changes to be reflected in the app. Additionally, users who have already loaded the app might need to refresh their page or wait for the app to fetch new data (depending on how often the app is set to refresh its data, which isn't specified in the provided code).
To make the app work offline and update more dynamically, you would need to implement additional features such as:
Caching the song data locally (e.g., using IndexedDB or localStorage)
Implementing a service worker for offline functionality
Setting up a mechanism to check for updates and refresh the local data periodically
These changes would require significant modifications to the current codebase.

They should also be able to choose whether they want the book with translation or no translation, and if they want the translation, do they want it after or on the side

there should be a printable pdf in which there is qr code
and the pdf not for print can have the youtube link, 
but does not need to have the qr code


if i do this there will be mistake in 3 ofher files that are importing SongData from songProcessor, and actually only 1 place should import, not all 3, so review and improve the code throughout such that only SongRendering should be importing the song data from songProcessor, not the pdfBook singlesongBook fullsongBook, they should be sourcing their info from the songRendering, right? if what i am saying is not correct way to improve my song app, then tell me a better way, review all files of @src closely, do not skip a single line in all the files, before responding about this in a concise manner, provide steps to make changes throughout, and also i have seen last time i did run dev that the app looks nice except many places the text is in white so it is not visible, is that correct? and the generate full book button in the navigationbar not sure it fully works to actually download the pdf book. 

before continuing add one item to the list of actions, 
on SongDisplay, there should be a button for More about this ilahi...
And that should only open a new page if alternative words are provided for that particular song. this should be last on the list, we will not implement it now. add this point then let's continue with what is next

Here's a detailed summary of the 11 steps for improving the Ilahi App PDF generation:
Create a new utility file for song rendering:
Status: Completed
File: src/utils/songRenderer.ts
Purpose: Centralizes song rendering logic for consistent display across the app
Update SongDisplay.vue:
Status: Completed
File: src/components/SongDisplay.vue
Changes: Utilizes the new songRenderer.ts for displaying songs
Refactor singleSongPDF.ts:
Status: Partially completed
File: src/utils/singleSongPDF.ts
Remaining tasks: Ensure proper centering of content and handling of long titles
Update fullSongBookPDF.ts:
Status: Implemented
File: src/utils/fullSongBookPDF.ts
Purpose: Generates a complete PDF book with all songs, including cover page and table of contents
Enhance PDF accessibility:
Status: Partially implemented
Tasks: Add more semantic structure, ensure proper reading order, and include alternative text for images
6. Update pdfBookUtils.ts:
Status: Implemented
File: src/utils/pdfBookUtils.ts
Purpose: Contains utility functions for creating cover pages, table of contents, and adding page numbers
Implement centered content:
Status: Partially implemented
Areas to improve: Ensure consistent centering across all PDF generation functions
Add decorative elements to PDF:
Status: Not yet implemented
Tasks: Design and add decorative elements to enhance the visual appeal of the PDFs
Optimize PDF size:
Status: Not yet implemented
Tasks: Implement compression techniques and optimize image sizes for smaller file sizes
Set up image storage:
Status: Not yet implemented
Tasks: Create a system for storing and managing decorative images for use in PDFs
11. Implement user input for decorative images:
Status: Not yet implemented
Tasks: Create a user interface for uploading and selecting decorative images for PDFs
Key components and their current state:
1. src/utils/fullSongBookPDF.ts:
src/utils/singleSongPDF.ts:
src/utils/pdfBookUtils.ts:
src/components/FullBookDownloader.vue:
These components form the core of the PDF generation functionality. The next steps should focus on improving accessibility, adding decorative elements, optimizing PDF size, and implementing image storage and user input for customization.


Ctrl+K to generate a command â€¢ Ctrl+/ to autocomplete




priority
center the words, also missing
see what is wrong for pdf, 
why it does not display right there
add spacing between stanzas, this did not work
same for translation, spacing missing

let's start again, 
@singleSongPDF.ts @SongDisplay.vue @pdfBookUtils.ts 
singleSongPDF maybe is not well defined. 
maybe we need one more util file?
because:
on SongDisplay, the song shouuld be displayed on the site/app itself, not just in a pdf. That song is built where for now? 
and then singleSongPDF is the one that takes this song and prints it as required into a pdf
and pdfBook then compiles as necessary to get full book of songs, we should not assume 1 song takes one page. @fullSongBookPDF.ts the single song pdf may need page numbers too. And the pdf generated should be readable for blind people too with accessibility pdf tool. 

Then we will also need a button that helps singing

@src @utils @components see if anything else will need adjustment accordingly, remember to factor in accessibility all over, add more steps to the above as you find more things that need fixing, is there a way to make the pdf light? i want content centered as well on home, everywhere where it looks nicer. on the right and left i want to be able to generate roses, either using some GPT, or pictures that i will input somewhere, can git hold pictures too? 
at start i just want the pdf to have a nice frame of small small roses and tulips combined, people should also have options when generating the pdf to choose between a couple of different frames. 






the code is not able to recognize where a song begins and ends. 
The reference for beginning of a song should be Y:
After Y: there is the title of the song. 

Then there are stanzas, sometimes stanzas resemble each other. the code should not bother about that but just consider it as stanza. 

The lyrics end where T: is mentioned. After that, if there is text, this is the translation. 
The translation ends whre Y: is mentioned. 

When producing the song output, there should be a blank line between stanzas, between title and first stanza, between last stanza and beginning of translation, 

And the words Lyrics, Translation, YouTube should be used instead of T: , Y: when displaying the final on the site and in the pdf. 

and the title, lyrics, everything should be displayed in the center of the site, 

now show me step by step where to make changes for all of these. 

sign in feature to add ilahi songs
and youtube links and translation

people can click on a button to suggest or give an ilahi
or to request an ilahi that is not there

youtube goes to links of other songs similar, 
various suggestions
and people can suggest too

show a model of what pdf page looks like
and it builds ours like that

people can generate their pdf with their own design
put a couple of design with flowers 
nature mountain etc 

and then to help singing
generate one with the alternative word style

call it singing assistance tool

put a button to join whatsapp group to learn singing with a community

people should be able to sign in
and get notifications when more songs are added
and when the translation is done
and when the youtube links are added
and when the ilahis are added
and when the pdf is generated
and when the pdf is downloaded
and when the pdf is shared
and when the pdf is printed
and when the pdf is deleted

Here are some additional ideas for your song app:

1. Playlist Creation: Allow users to create and save custom playlists of their favorite songs.

2. Audio Playback: Integrate audio playback functionality, so users can listen to the songs directly within the app.

3. Pronunciation Guide: Add a feature that provides pronunciation guides for the Turkish lyrics, possibly with audio clips.

4. Community Annotations: Allow users to add notes or explanations to specific lines or words in the songs, creating a collaborative learning environment.

5. Themed Collections: Organize songs into themed collections (e.g., by occasion, mood, or historical period).

6. Offline Mode: Implement offline functionality so users can access songs and translations without an internet connection.

7. Social Sharing: Add buttons to easily share songs or playlists on social media platforms.

8. Progress Tracking: Implement a feature for users to mark songs as learned or favorite, tracking their progress.

9. Multilingual Support: Expand the app to support multiple languages for the interface and translations.

10. Interactive Quizzes: Create quizzes based on song lyrics or translations to help users learn and engage with the content.

11. Collaborative Translation: Allow community members to contribute translations or suggest improvements to existing ones.

12. Virtual Singing Rooms: Implement a feature where users can join virtual rooms to sing together in real-time.

13. Song of the Day: Highlight a different song each day on the app's homepage.

14. Customizable PDF Designs: Allow users to choose from various design templates when generating PDFs.

15. Integration with Music Streaming Services: Allow users to link their accounts from popular music streaming services to access additional features.

16. Gamification Elements: Introduce points, badges, or levels to encourage user engagement and learning.

17. Accessibility Features: Implement screen reader support and other accessibility features to make the app usable for people with disabilities.
17. Accessibility Features: Implement screen reader support and other accessibility features to make the app usable for people with disabilities. This should be a high priority for the app to ensure inclusivity.

1. Playlist Creation: Allow users to create and save custom playlists of their favorite songs.

2. Audio Playback: Integrate audio playback functionality, so users can listen to the songs directly within the app.

3. Pronunciation Guide: Add a feature that provides pronunciation guides for the Turkish lyrics, possibly with audio clips.

4. Community Annotations: Allow users to add notes or explanations to specific lines or words in the songs, creating a collaborative learning environment.

5. Themed Collections: Organize songs into themed collections (e.g., by occasion, mood, or historical period).

6. Offline Mode: Implement offline functionality so users can access songs and translations without an internet connection.

7. Social Sharing: Add buttons to easily share songs or playlists on social media platforms.

8. Progress Tracking: Implement a feature for users to mark songs as learned or favorite, tracking their progress.

9. Multilingual Support: Expand the app to support multiple languages for the interface and translations.

10. Interactive Quizzes: Create quizzes based on song lyrics or translations to help users learn and engage with the content.

11. Collaborative Translation: Allow community members to contribute translations or suggest improvements to existing ones.

12. Virtual Singing Rooms: Implement a feature where users can join virtual rooms to sing together in real-time.

13. Song of the Day: Highlight a different song each day on the app's homepage.

14. Customizable PDF Designs: Allow users to choose from various design templates when generating PDFs.

15. Integration with Music Streaming Services: Allow users to link their accounts from popular music streaming services to access additional features.

16. Gamification Elements: Introduce points, badges, or levels to encourage user engagement and learning.


18. Song History and Cultural Context: Provide background information on the songs, including their history and cultural significance.

19. Rhythm and Meter Guide: Include information about the rhythmic structure and meter of each song to aid in learning.

1. Accessibility Features: Implement screen reader support and other accessibility features to make the app usable for people with disabilities. This should be a high priority for the app to ensure inclusivity.

2. Playlist Creation: Allow users to create and save custom playlists of their favorite songs.

3. Audio Playback: Integrate audio playback functionality, so users can listen to the songs directly within the app.

4. Pronunciation Guide: Add a feature that provides pronunciation guides for the Turkish lyrics, possibly with audio clips.

5. Community Annotations: Allow users to add notes or explanations to specific lines or words in the songs, creating a collaborative learning environment.

6. Themed Collections: Organize songs into themed collections (e.g., by occasion, mood, or historical period).

7. Offline Mode: Implement offline functionality so users can access songs and translations without an internet connection.

8. Social Sharing: Add buttons to easily share songs or playlists on social media platforms.

9. Progress Tracking: Implement a feature for users to mark songs as learned or favorite, tracking their progress.

10. Multilingual Support: Expand the app to support multiple languages for the interface and translations.

11. Interactive Quizzes: Create quizzes based on song lyrics or translations to help users learn and engage with the content.

12. Collaborative Translation: Allow community members to contribute translations or suggest improvements to existing ones.

13. Virtual Singing Rooms: Implement a feature where users can join virtual rooms to sing together in real-time.

14. Song of the Day: Highlight a different song each day on the app's homepage.

15. Customizable PDF Designs: Allow users to choose from various design templates when generating PDFs.

16. Integration with Music Streaming Services: Allow users to link their accounts from popular music streaming services to access additional features.

17. Gamification Elements: Introduce points, badges, or levels to encourage user engagement and learning.

18. Song History and Cultural Context: Provide background information on the songs, including their history and cultural significance.

19. Rhythm and Meter Guide: Include information about the rhythmic structure and meter of each song to aid in learning.

20. Mobile App Version: Develop a mobile app version for iOS and Android platforms for easier access on smartphones and tablets.

21. Author Information: Add a feature to display the author of each song and who put it to music. For songs with unknown authors or composers, allow users to suggest this information for community verification.

These ideas can be prioritized based on user feedback and development resources available.




question
why the link of the new build links up to the one that is supposed to be the other repo? find out
convert pdf to txt or extract words from pdf and recognize where song begins and ends

next steps:
Here's a prioritized list of features you've mentioned, with estimated timelines:

Accurate display of words on site and PDF (Already implemented, 0 hours)
Publish app using GitHub Pages (1 hour)
Add page numbers to full book PDF (30 minutes)
Include donation statement in single song PDF and SongDisplay component (30 minutes)
Implement zoom functionality for lyrics (1-2 hours)
Add line-by-line translation feature with GPT integration (3-4 hours)
Implement toggle for translation feature (1 hour)
Enhance UI with Tailwind CSS and DaisyUI (2-3 hours)
Total estimated time: 9-12 hours

Here's a step-by-step guide for deployment and implementing the features, in order of priority:

Deploy to GitHub Pages:

Create a new repository on GitHub
Push your local code to the new repository
Enable GitHub Pages in the repository settings
Configure your build process for GitHub Pages
Fix song parsing and sorting issues:

Refine the processSongsFile function to correctly differentiate between titles and lyrics
Implement proper song separation logic
Add page numbers to full book PDF:

Modify the generateFullBookPDF function to include page numbers
Include donation statements:

Add the AQRT donation statement to single song PDFs
Include the donation message in the SongDisplay component
Implement translation display:

Add translations to single song PDFs
Include all available translations in the full book PDF
Create search functionality:

Develop a search component with input field
Implement search logic with Turkish character normalization
Integrate search results display
Implement zoom functionality for lyrics:

Add zoom controls to the SongDisplay component
Implement zoom logic for text size adjustment
Develop line-by-line translation feature:

Create a component for displaying line translations
Implement GPT integration for translations
Add toggle for enabling/disabling this feature
Enhance UI with Tailwind CSS and DaisyUI:

Apply consistent styling across components
Improve overall layout and user experience
Implement song discovery by humming:

Research and integrate an AI-based audio recognition API
Create an interface for users to record or input hummed melodies
Develop matching algorithm to find songs based on hummed input
This comprehensive plan covers all discussed features and adds the song discovery by humming as an advanced feature. Each step builds upon the previous ones, gradually enhancing the app's functionality and user experience.

22 Aug 2024
notes from owner:
To put purpose of ilahi
the philosophy of the Sufism

disclaimer GPT
plus no translated work is equal to original

it should translate as concept 

link to complete song for sirna ala
